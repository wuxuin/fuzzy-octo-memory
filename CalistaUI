-- CalistaUI Library
-- Author: wuxuin
-- Date: 2025-07-13 14:57:43 UTC
-- Version: 2.0

local CalistaUI = {}
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

-- Utility Functions
local function CreateInstance(className, properties)
    local instance = Instance.new(className)
    for k, v in pairs(properties or {}) do
        instance[k] = v
    end
    return instance
end

-- Draggable Module
local function MakeDraggable(gui, handle)
    local dragging, dragInput, dragStart, startPos
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or
           input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            gui.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X,
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

-- Core UI Creation
function CalistaUI.new()
    local Library = {
        theme = {
            background = Color3.fromRGB(15, 15, 15),
            secondary = Color3.fromRGB(21, 21, 21),
            accent = Color3.fromRGB(106, 0, 255),
            text = Color3.fromRGB(157, 157, 157),
            border = Color3.fromRGB(32, 22, 54)
        }
    }
    
    -- Create Base GUI
    Library.gui = CreateInstance("ScreenGui", {
        Name = "CalistaUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
    })
    
    -- Create Main Frame
    Library.main = CreateInstance("Frame", {
        Name = "Main",
        Parent = Library.gui,
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundColor3 = Library.theme.background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.3, 0),
        Size = UDim2.new(0.309, 0, 0.566, 0)
    })
    
    -- Add Corner
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = Library.main
    })
    
    -- Make Draggable
    MakeDraggable(Library.main, Library.main)
    
    -- Create Container
    Library.container = CreateInstance("ScrollingFrame", {
        Name = "FeatureContainer",
        Parent = Library.main,
        Active = true,
        BackgroundColor3 = Library.theme.background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.05, 0, 0.273, 0),
        Size = UDim2.new(0.9, 0, 0.675, 0),
        ScrollBarThickness = 0,
        CanvasSize = UDim2.new(0, 0, 0, 0)
    })
    
    -- Add Container Layout
    local listLayout = CreateInstance("UIListLayout", {
        Parent = Library.container,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0.035, 0)
    })
    
    -- Auto Canvas Size
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        Library.container.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
    end)
    
    -- Create Logo
    Library.logo = CreateInstance("ImageLabel", {
        Name = "Logo",
        Parent = Library.main,
        BackgroundTransparency = 1,
        Position = UDim2.new(0.419, 0, 0.021, 0),
        Size = UDim2.new(0.16, 0, 0.131, 0),
        Image = "rbxassetid://115012323389892",
        ScaleType = Enum.ScaleType.Fit
    })
    
    -- Feature Creation Functions
    function Library:CreateToggle(name, default, callback)
        local toggle = CreateInstance("Frame", {
            Name = "ToggleFeature",
            Parent = self.container,
            BackgroundColor3 = self.theme.secondary,
            Size = UDim2.new(0.918, 0, 0.118, 0)
        })
        
        -- Add Corner
        CreateInstance("UICorner", {
            Parent = toggle
        })
        
        -- Create Toggle Button
        local toggleBtn = CreateInstance("Frame", {
            Name = "Toggle",
            Parent = toggle,
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Position = UDim2.new(0.93, 0, 0.486, 0),
            Size = UDim2.new(0.133, 0, 0.56, 0)
        })
        
        -- Add Toggle Gradient
        local gradient = CreateInstance("UIGradient", {
            Parent = toggleBtn,
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, self.theme.accent),
                ColorSequenceKeypoint.new(1, self.theme.border)
            }),
            Rotation = 90
        })
        
        -- Add Toggle Dot
        local dot = CreateInstance("Frame", {
            Name = "ToggleDot",
            Parent = toggleBtn,
            BackgroundColor3 = Color3.fromRGB(216, 216, 216),
            Position = UDim2.new(default and 0.525 or 0.075, 0, 0.087, 0),
            Size = UDim2.new(0.403, 0, 0.807, 0)
        })
        
        -- Add Corner to Dot
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = dot
        })
        
        -- Add Corner to Toggle
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = toggleBtn
        })
        
        -- Add Text
        local text = CreateInstance("TextButton", {
            Name = "Name",
            Parent = toggle,
            BackgroundTransparency = 1,
            Position = UDim2.new(0.029, 0, 0.34, 0),
            Size = UDim2.new(0.271, 0, 0.381, 0),
            Font = Enum.Font.Gotham,
            Text = name,
            TextColor3 = self.theme.text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        -- Toggle Logic
        local enabled = default
        local function updateToggle()
            enabled = not enabled
            local tweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
            local tween = TweenService:Create(dot, tweenInfo, {
                Position = UDim2.new(enabled and 0.525 or 0.075, 0, 0.087, 0)
            })
            tween:Play()
            if callback then callback(enabled) end
        end
        
        toggleBtn.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or
               input.UserInputType == Enum.UserInputType.Touch then
                updateToggle()
            end
        end)
        
        return {
            Toggle = toggle,
            Enabled = function() return enabled end,
            Set = function(value)
                if enabled ~= value then
                    updateToggle()
                end
            end
        }
    end
    
    function Library:CreateButton(name, callback)
        local button = CreateInstance("Frame", {
            Name = "ButtonFeature",
            Parent = self.container,
            BackgroundColor3 = self.theme.secondary,
            Size = UDim2.new(0.918, 0, 0.118, 0)
        })
        
        -- Add Corner
        CreateInstance("UICorner", {
            Parent = button
        })
        
        -- Add Text
        local text = CreateInstance("TextButton", {
            Name = "Name",
            Parent = button,
            BackgroundTransparency = 1,
            Position = UDim2.new(0.029, 0, 0.34, 0),
            Size = UDim2.new(0.349, 0, 0.381, 0),
            Font = Enum.Font.Gotham,
            Text = name,
            TextColor3 = self.theme.text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        -- Add Click Handler
        text.MouseButton1Click:Connect(function()
            if callback then callback() end
        end)
        
        -- Mobile Support
        text.TouchTap:Connect(function()
            if callback then callback() end
        end)
        
        return button
    end
    
    function Library:CreateSlider(name, min, max, default, callback)
        local slider = CreateInstance("Frame", {
            Name = "SliderCont",
            Parent = self.container,
            BackgroundColor3 = self.theme.secondary,
            Size = UDim2.new(0.918, 0, 0.163, 0)
        })
        
        -- Add Corner
        CreateInstance("UICorner", {
            Parent = slider
        })
        
        -- Add Background
        local background = CreateInstance("Frame", {
            Name = "SliderBackground",
            Parent = slider,
            BackgroundColor3 = self.theme.background,
            Position = UDim2.new(0.037, 0, 0.641, 0),
            Size = UDim2.new(0.923, 0, 0.17, 0)
        })
        
        -- Add Corner to Background
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = background
        })
        
        -- Add Fill
        local fill = CreateInstance("Frame", {
            Name = "Fill",
            Parent = background,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
        })
        
        -- Add Corner to Fill
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = fill
        })
        
        -- Add Gradient to Fill
        local gradient = CreateInstance("UIGradient", {
            Parent = fill,
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, self.theme.accent),
                ColorSequenceKeypoint.new(1, self.theme.border)
            }),
            Rotation = 90
        })
        
        -- Add Text
        local text = CreateInstance("TextButton", {
            Name = "SliderText",
            Parent = slider,
            BackgroundTransparency = 1,
            Position = UDim2.new(0.04, 0, 0.136, 0),
            Size = UDim2.new(0.667, 0, 0.361, 0),
            Font = Enum.Font.Gotham,
            Text = name,
            TextColor3 = self.theme.text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        -- Add Value Text
        local valueText = CreateInstance("TextBox", {
            Name = "NumberText",
            Parent = slider,
            BackgroundTransparency = 1,
            Position = UDim2.new(0.726, 0, 0.179, 0),
            Size = UDim2.new(0.23, 0, 0.265, 0),
            Font = Enum.Font.Gotham,
            Text = tostring(default),
            TextColor3 = self.theme.text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Right
        })
        
        -- Slider Logic
        local dragging = false
        local value = default
        
        local function updateSlider(input)
            local pos = math.clamp(
                (input.Position.X - background.AbsolutePosition.X) / background.AbsoluteSize.X,
                0, 1
            )
            value = math.floor(min + (max - min) * pos)
            valueText.Text = tostring(value)
            fill.Size = UDim2.new(pos, 0, 1, 0)
            if callback then callback(value) end
        end
        
        background.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or
               input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                updateSlider(input)
            end
        end)
        
        background.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or
               input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and (
                input.UserInputType == Enum.UserInputType.MouseMovement or
                input.UserInputType == Enum.UserInputType.Touch
            ) then
                updateSlider(input)
            end
        end)
        
        return {
            Slider = slider,
            Value = function() return value end,
            Set = function(newValue)
                value = math.clamp(newValue, min, max)
                valueText.Text = tostring(value)
                fill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
                if callback then callback(value) end
            end
        }
    end
    
    return Library
end

return CalistaUI
